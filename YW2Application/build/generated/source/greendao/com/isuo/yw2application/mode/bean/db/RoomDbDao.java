package com.isuo.yw2application.mode.bean.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "room".
*/
public class RoomDbDao extends AbstractDao<RoomDb, Long> {

    public static final String TABLENAME = "room";

    /**
     * Properties of entity RoomDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property TaskId = new Property(1, long.class, "taskId", false, "TASK_ID");
        public final static Property RoomId = new Property(2, long.class, "roomId", false, "ROOM_ID");
        public final static Property TaskRoomId = new Property(3, long.class, "taskRoomId", false, "TASK_ROOM_ID");
        public final static Property LastSaveTime = new Property(4, long.class, "lastSaveTime", false, "LAST_SAVE_TIME");
        public final static Property TakePhotoPosition = new Property(5, long.class, "takePhotoPosition", false, "TAKE_PHOTO_POSITION");
        public final static Property StartTime = new Property(6, long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(7, long.class, "endTime", false, "END_TIME");
        public final static Property RoomName = new Property(8, String.class, "roomName", false, "ROOM_NAME");
        public final static Property PhotoUrl = new Property(9, String.class, "photoUrl", false, "PHOTO_URL");
        public final static Property UploadPhotoUrl = new Property(10, String.class, "uploadPhotoUrl", false, "UPLOAD_PHOTO_URL");
        public final static Property TaskState = new Property(11, int.class, "taskState", false, "TASK_STATE");
        public final static Property CheckCount = new Property(12, int.class, "checkCount", false, "CHECK_COUNT");
        public final static Property CurrentUserId = new Property(13, long.class, "currentUserId", false, "CURRENT_USER_ID");
    }


    public RoomDbDao(DaoConfig config) {
        super(config);
    }
    
    public RoomDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"room\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"TASK_ID\" INTEGER NOT NULL ," + // 1: taskId
                "\"ROOM_ID\" INTEGER NOT NULL ," + // 2: roomId
                "\"TASK_ROOM_ID\" INTEGER NOT NULL ," + // 3: taskRoomId
                "\"LAST_SAVE_TIME\" INTEGER NOT NULL ," + // 4: lastSaveTime
                "\"TAKE_PHOTO_POSITION\" INTEGER NOT NULL ," + // 5: takePhotoPosition
                "\"START_TIME\" INTEGER NOT NULL ," + // 6: startTime
                "\"END_TIME\" INTEGER NOT NULL ," + // 7: endTime
                "\"ROOM_NAME\" TEXT," + // 8: roomName
                "\"PHOTO_URL\" TEXT," + // 9: photoUrl
                "\"UPLOAD_PHOTO_URL\" TEXT," + // 10: uploadPhotoUrl
                "\"TASK_STATE\" INTEGER NOT NULL ," + // 11: taskState
                "\"CHECK_COUNT\" INTEGER NOT NULL ," + // 12: checkCount
                "\"CURRENT_USER_ID\" INTEGER NOT NULL );"); // 13: currentUserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"room\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RoomDb entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getTaskId());
        stmt.bindLong(3, entity.getRoomId());
        stmt.bindLong(4, entity.getTaskRoomId());
        stmt.bindLong(5, entity.getLastSaveTime());
        stmt.bindLong(6, entity.getTakePhotoPosition());
        stmt.bindLong(7, entity.getStartTime());
        stmt.bindLong(8, entity.getEndTime());
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(9, roomName);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(10, photoUrl);
        }
 
        String uploadPhotoUrl = entity.getUploadPhotoUrl();
        if (uploadPhotoUrl != null) {
            stmt.bindString(11, uploadPhotoUrl);
        }
        stmt.bindLong(12, entity.getTaskState());
        stmt.bindLong(13, entity.getCheckCount());
        stmt.bindLong(14, entity.getCurrentUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RoomDb entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getTaskId());
        stmt.bindLong(3, entity.getRoomId());
        stmt.bindLong(4, entity.getTaskRoomId());
        stmt.bindLong(5, entity.getLastSaveTime());
        stmt.bindLong(6, entity.getTakePhotoPosition());
        stmt.bindLong(7, entity.getStartTime());
        stmt.bindLong(8, entity.getEndTime());
 
        String roomName = entity.getRoomName();
        if (roomName != null) {
            stmt.bindString(9, roomName);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(10, photoUrl);
        }
 
        String uploadPhotoUrl = entity.getUploadPhotoUrl();
        if (uploadPhotoUrl != null) {
            stmt.bindString(11, uploadPhotoUrl);
        }
        stmt.bindLong(12, entity.getTaskState());
        stmt.bindLong(13, entity.getCheckCount());
        stmt.bindLong(14, entity.getCurrentUserId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RoomDb readEntity(Cursor cursor, int offset) {
        RoomDb entity = new RoomDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getLong(offset + 1), // taskId
            cursor.getLong(offset + 2), // roomId
            cursor.getLong(offset + 3), // taskRoomId
            cursor.getLong(offset + 4), // lastSaveTime
            cursor.getLong(offset + 5), // takePhotoPosition
            cursor.getLong(offset + 6), // startTime
            cursor.getLong(offset + 7), // endTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // roomName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // photoUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // uploadPhotoUrl
            cursor.getInt(offset + 11), // taskState
            cursor.getInt(offset + 12), // checkCount
            cursor.getLong(offset + 13) // currentUserId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RoomDb entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskId(cursor.getLong(offset + 1));
        entity.setRoomId(cursor.getLong(offset + 2));
        entity.setTaskRoomId(cursor.getLong(offset + 3));
        entity.setLastSaveTime(cursor.getLong(offset + 4));
        entity.setTakePhotoPosition(cursor.getLong(offset + 5));
        entity.setStartTime(cursor.getLong(offset + 6));
        entity.setEndTime(cursor.getLong(offset + 7));
        entity.setRoomName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhotoUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUploadPhotoUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTaskState(cursor.getInt(offset + 11));
        entity.setCheckCount(cursor.getInt(offset + 12));
        entity.setCurrentUserId(cursor.getLong(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RoomDb entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RoomDb entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RoomDb entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
