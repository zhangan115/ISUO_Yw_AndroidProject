package com.isuo.yw2application.mode.bean.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "share_data".
*/
public class ShareDataDbDao extends AbstractDao<ShareDataDb, Long> {

    public static final String TABLENAME = "share_data";

    /**
     * Properties of entity ShareDataDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property InspectionId = new Property(0, long.class, "inspectionId", true, "_id");
        public final static Property Value = new Property(1, String.class, "value", false, "VALUE");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property TaskId = new Property(3, long.class, "taskId", false, "TASK_ID");
        public final static Property RoomId = new Property(4, long.class, "roomId", false, "ROOM_ID");
        public final static Property EquipmentId = new Property(5, long.class, "equipmentId", false, "EQUIPMENT_ID");
        public final static Property ChooseInspectionName = new Property(6, String.class, "chooseInspectionName", false, "CHOOSE_INSPECTION_NAME");
        public final static Property DataItemId = new Property(7, long.class, "dataItemId", false, "DATA_ITEM_ID");
        public final static Property LocalPhoto = new Property(8, String.class, "localPhoto", false, "LOCAL_PHOTO");
        public final static Property CurrentUserId = new Property(9, long.class, "currentUserId", false, "CURRENT_USER_ID");
    }


    public ShareDataDbDao(DaoConfig config) {
        super(config);
    }
    
    public ShareDataDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"share_data\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: inspectionId
                "\"VALUE\" TEXT," + // 1: value
                "\"TYPE\" INTEGER NOT NULL ," + // 2: type
                "\"TASK_ID\" INTEGER NOT NULL ," + // 3: taskId
                "\"ROOM_ID\" INTEGER NOT NULL ," + // 4: roomId
                "\"EQUIPMENT_ID\" INTEGER NOT NULL ," + // 5: equipmentId
                "\"CHOOSE_INSPECTION_NAME\" TEXT," + // 6: chooseInspectionName
                "\"DATA_ITEM_ID\" INTEGER NOT NULL ," + // 7: dataItemId
                "\"LOCAL_PHOTO\" TEXT," + // 8: localPhoto
                "\"CURRENT_USER_ID\" INTEGER NOT NULL );"); // 9: currentUserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"share_data\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ShareDataDb entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getInspectionId());
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(2, value);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getTaskId());
        stmt.bindLong(5, entity.getRoomId());
        stmt.bindLong(6, entity.getEquipmentId());
 
        String chooseInspectionName = entity.getChooseInspectionName();
        if (chooseInspectionName != null) {
            stmt.bindString(7, chooseInspectionName);
        }
        stmt.bindLong(8, entity.getDataItemId());
 
        String localPhoto = entity.getLocalPhoto();
        if (localPhoto != null) {
            stmt.bindString(9, localPhoto);
        }
        stmt.bindLong(10, entity.getCurrentUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ShareDataDb entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getInspectionId());
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(2, value);
        }
        stmt.bindLong(3, entity.getType());
        stmt.bindLong(4, entity.getTaskId());
        stmt.bindLong(5, entity.getRoomId());
        stmt.bindLong(6, entity.getEquipmentId());
 
        String chooseInspectionName = entity.getChooseInspectionName();
        if (chooseInspectionName != null) {
            stmt.bindString(7, chooseInspectionName);
        }
        stmt.bindLong(8, entity.getDataItemId());
 
        String localPhoto = entity.getLocalPhoto();
        if (localPhoto != null) {
            stmt.bindString(9, localPhoto);
        }
        stmt.bindLong(10, entity.getCurrentUserId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ShareDataDb readEntity(Cursor cursor, int offset) {
        ShareDataDb entity = new ShareDataDb( //
            cursor.getLong(offset + 0), // inspectionId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // value
            cursor.getInt(offset + 2), // type
            cursor.getLong(offset + 3), // taskId
            cursor.getLong(offset + 4), // roomId
            cursor.getLong(offset + 5), // equipmentId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // chooseInspectionName
            cursor.getLong(offset + 7), // dataItemId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // localPhoto
            cursor.getLong(offset + 9) // currentUserId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ShareDataDb entity, int offset) {
        entity.setInspectionId(cursor.getLong(offset + 0));
        entity.setValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setTaskId(cursor.getLong(offset + 3));
        entity.setRoomId(cursor.getLong(offset + 4));
        entity.setEquipmentId(cursor.getLong(offset + 5));
        entity.setChooseInspectionName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDataItemId(cursor.getLong(offset + 7));
        entity.setLocalPhoto(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCurrentUserId(cursor.getLong(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ShareDataDb entity, long rowId) {
        entity.setInspectionId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ShareDataDb entity) {
        if(entity != null) {
            return entity.getInspectionId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ShareDataDb entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
