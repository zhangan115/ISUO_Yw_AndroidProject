package com.isuo.yw2application.mode.bean.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "equipment".
*/
public class EquipmentDbDao extends AbstractDao<EquipmentDb, Long> {

    public static final String TABLENAME = "equipment";

    /**
     * Properties of entity EquipmentDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property TaskId = new Property(1, long.class, "taskId", false, "TASK_ID");
        public final static Property RoomId = new Property(2, long.class, "roomId", false, "ROOM_ID");
        public final static Property EquipmentId = new Property(3, long.class, "equipmentId", false, "EQUIPMENT_ID");
        public final static Property EquipmentName = new Property(4, String.class, "equipmentName", false, "EQUIPMENT_NAME");
        public final static Property AlarmState = new Property(5, boolean.class, "alarmState", false, "ALARM_STATE");
        public final static Property UploadState = new Property(6, boolean.class, "uploadState", false, "UPLOAD_STATE");
        public final static Property CanUpload = new Property(7, boolean.class, "canUpload", false, "CAN_UPLOAD");
        public final static Property CurrentUserId = new Property(8, long.class, "currentUserId", false, "CURRENT_USER_ID");
    }


    public EquipmentDbDao(DaoConfig config) {
        super(config);
    }
    
    public EquipmentDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"equipment\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"TASK_ID\" INTEGER NOT NULL ," + // 1: taskId
                "\"ROOM_ID\" INTEGER NOT NULL ," + // 2: roomId
                "\"EQUIPMENT_ID\" INTEGER NOT NULL ," + // 3: equipmentId
                "\"EQUIPMENT_NAME\" TEXT," + // 4: equipmentName
                "\"ALARM_STATE\" INTEGER NOT NULL ," + // 5: alarmState
                "\"UPLOAD_STATE\" INTEGER NOT NULL ," + // 6: uploadState
                "\"CAN_UPLOAD\" INTEGER NOT NULL ," + // 7: canUpload
                "\"CURRENT_USER_ID\" INTEGER NOT NULL );"); // 8: currentUserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"equipment\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EquipmentDb entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getTaskId());
        stmt.bindLong(3, entity.getRoomId());
        stmt.bindLong(4, entity.getEquipmentId());
 
        String equipmentName = entity.getEquipmentName();
        if (equipmentName != null) {
            stmt.bindString(5, equipmentName);
        }
        stmt.bindLong(6, entity.getAlarmState() ? 1L: 0L);
        stmt.bindLong(7, entity.getUploadState() ? 1L: 0L);
        stmt.bindLong(8, entity.getCanUpload() ? 1L: 0L);
        stmt.bindLong(9, entity.getCurrentUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EquipmentDb entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindLong(2, entity.getTaskId());
        stmt.bindLong(3, entity.getRoomId());
        stmt.bindLong(4, entity.getEquipmentId());
 
        String equipmentName = entity.getEquipmentName();
        if (equipmentName != null) {
            stmt.bindString(5, equipmentName);
        }
        stmt.bindLong(6, entity.getAlarmState() ? 1L: 0L);
        stmt.bindLong(7, entity.getUploadState() ? 1L: 0L);
        stmt.bindLong(8, entity.getCanUpload() ? 1L: 0L);
        stmt.bindLong(9, entity.getCurrentUserId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EquipmentDb readEntity(Cursor cursor, int offset) {
        EquipmentDb entity = new EquipmentDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getLong(offset + 1), // taskId
            cursor.getLong(offset + 2), // roomId
            cursor.getLong(offset + 3), // equipmentId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // equipmentName
            cursor.getShort(offset + 5) != 0, // alarmState
            cursor.getShort(offset + 6) != 0, // uploadState
            cursor.getShort(offset + 7) != 0, // canUpload
            cursor.getLong(offset + 8) // currentUserId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EquipmentDb entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTaskId(cursor.getLong(offset + 1));
        entity.setRoomId(cursor.getLong(offset + 2));
        entity.setEquipmentId(cursor.getLong(offset + 3));
        entity.setEquipmentName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAlarmState(cursor.getShort(offset + 5) != 0);
        entity.setUploadState(cursor.getShort(offset + 6) != 0);
        entity.setCanUpload(cursor.getShort(offset + 7) != 0);
        entity.setCurrentUserId(cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EquipmentDb entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EquipmentDb entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EquipmentDb entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
