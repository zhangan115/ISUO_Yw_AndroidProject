package com.isuo.yw2application.mode.bean.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "file_image".
*/
public class ImageDao extends AbstractDao<Image, Long> {

    public static final String TABLENAME = "file_image";

    /**
     * Properties of entity Image.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property SaveTime = new Property(1, Long.class, "saveTime", false, "SAVE_TIME");
        public final static Property ImageLocal = new Property(2, String.class, "imageLocal", false, "IMAGE_LOCAL");
        public final static Property BackUrl = new Property(3, String.class, "backUrl", false, "BACK_URL");
        public final static Property IsUpload = new Property(4, boolean.class, "isUpload", false, "IS_UPLOAD");
        public final static Property WorkType = new Property(5, int.class, "workType", false, "WORK_TYPE");
        public final static Property ItemId = new Property(6, long.class, "itemId", false, "ITEM_ID");
        public final static Property CurrentUserId = new Property(7, long.class, "currentUserId", false, "CURRENT_USER_ID");
    }


    public ImageDao(DaoConfig config) {
        super(config);
    }
    
    public ImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"file_image\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"SAVE_TIME\" INTEGER," + // 1: saveTime
                "\"IMAGE_LOCAL\" TEXT," + // 2: imageLocal
                "\"BACK_URL\" TEXT," + // 3: backUrl
                "\"IS_UPLOAD\" INTEGER NOT NULL ," + // 4: isUpload
                "\"WORK_TYPE\" INTEGER NOT NULL ," + // 5: workType
                "\"ITEM_ID\" INTEGER NOT NULL ," + // 6: itemId
                "\"CURRENT_USER_ID\" INTEGER NOT NULL );"); // 7: currentUserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"file_image\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Image entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Long saveTime = entity.getSaveTime();
        if (saveTime != null) {
            stmt.bindLong(2, saveTime);
        }
 
        String imageLocal = entity.getImageLocal();
        if (imageLocal != null) {
            stmt.bindString(3, imageLocal);
        }
 
        String backUrl = entity.getBackUrl();
        if (backUrl != null) {
            stmt.bindString(4, backUrl);
        }
        stmt.bindLong(5, entity.getIsUpload() ? 1L: 0L);
        stmt.bindLong(6, entity.getWorkType());
        stmt.bindLong(7, entity.getItemId());
        stmt.bindLong(8, entity.getCurrentUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Image entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Long saveTime = entity.getSaveTime();
        if (saveTime != null) {
            stmt.bindLong(2, saveTime);
        }
 
        String imageLocal = entity.getImageLocal();
        if (imageLocal != null) {
            stmt.bindString(3, imageLocal);
        }
 
        String backUrl = entity.getBackUrl();
        if (backUrl != null) {
            stmt.bindString(4, backUrl);
        }
        stmt.bindLong(5, entity.getIsUpload() ? 1L: 0L);
        stmt.bindLong(6, entity.getWorkType());
        stmt.bindLong(7, entity.getItemId());
        stmt.bindLong(8, entity.getCurrentUserId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Image readEntity(Cursor cursor, int offset) {
        Image entity = new Image( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // saveTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageLocal
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // backUrl
            cursor.getShort(offset + 4) != 0, // isUpload
            cursor.getInt(offset + 5), // workType
            cursor.getLong(offset + 6), // itemId
            cursor.getLong(offset + 7) // currentUserId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Image entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSaveTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setImageLocal(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBackUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsUpload(cursor.getShort(offset + 4) != 0);
        entity.setWorkType(cursor.getInt(offset + 5));
        entity.setItemId(cursor.getLong(offset + 6));
        entity.setCurrentUserId(cursor.getLong(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Image entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Image entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Image entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
