// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.isuo.yw2application.view.main.data.staff_time;

import com.isuo.yw2application.mode.customer.CustomerRepository;
import com.isuo.yw2application.mode.customer.CustomerRepositoryComponent;
import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerStaffTimeComponent implements StaffTimeComponent {
  private MembersInjector<StaffTimePresenter> staffTimePresenterMembersInjector;

  private Provider<CustomerRepository> getRepositoryProvider;

  private Provider<StaffTimeContract.View> provideStaffTimeContractViewProvider;

  private Provider<StaffTimePresenter> staffTimePresenterProvider;

  private MembersInjector<StaffTimeActivity> staffTimeActivityMembersInjector;

  private DaggerStaffTimeComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.staffTimePresenterMembersInjector = StaffTimePresenter_MembersInjector.create();

    this.getRepositoryProvider =
        new Factory<CustomerRepository>() {
          private final CustomerRepositoryComponent customerRepositoryComponent =
              builder.customerRepositoryComponent;

          @Override
          public CustomerRepository get() {
            return Preconditions.checkNotNull(
                customerRepositoryComponent.getRepository(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.provideStaffTimeContractViewProvider =
        StaffTimeModule_ProvideStaffTimeContractViewFactory.create(builder.staffTimeModule);

    this.staffTimePresenterProvider =
        StaffTimePresenter_Factory.create(
            staffTimePresenterMembersInjector,
            getRepositoryProvider,
            provideStaffTimeContractViewProvider);

    this.staffTimeActivityMembersInjector =
        StaffTimeActivity_MembersInjector.create(staffTimePresenterProvider);
  }

  @Override
  public void inject(StaffTimeActivity activity) {
    staffTimeActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private StaffTimeModule staffTimeModule;

    private CustomerRepositoryComponent customerRepositoryComponent;

    private Builder() {}

    public StaffTimeComponent build() {
      if (staffTimeModule == null) {
        throw new IllegalStateException(StaffTimeModule.class.getCanonicalName() + " must be set");
      }
      if (customerRepositoryComponent == null) {
        throw new IllegalStateException(
            CustomerRepositoryComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerStaffTimeComponent(this);
    }

    public Builder staffTimeModule(StaffTimeModule staffTimeModule) {
      this.staffTimeModule = Preconditions.checkNotNull(staffTimeModule);
      return this;
    }

    public Builder customerRepositoryComponent(
        CustomerRepositoryComponent customerRepositoryComponent) {
      this.customerRepositoryComponent = Preconditions.checkNotNull(customerRepositoryComponent);
      return this;
    }
  }
}
