// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.isuo.yw2application.view.pass;

import com.isuo.yw2application.mode.customer.CustomerRepository;
import com.isuo.yw2application.mode.customer.CustomerRepositoryComponent;
import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerForgePassComponent implements ForgePassComponent {
  private MembersInjector<ForgePassPresenter> forgePassPresenterMembersInjector;

  private Provider<CustomerRepository> getRepositoryProvider;

  private Provider<ForgePassContract.View> provideRegisterContractViewProvider;

  private Provider<ForgePassPresenter> forgePassPresenterProvider;

  private MembersInjector<ForgePassActivity> forgePassActivityMembersInjector;

  private DaggerForgePassComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.forgePassPresenterMembersInjector = ForgePassPresenter_MembersInjector.create();

    this.getRepositoryProvider =
        new Factory<CustomerRepository>() {
          private final CustomerRepositoryComponent customerRepositoryComponent =
              builder.customerRepositoryComponent;

          @Override
          public CustomerRepository get() {
            return Preconditions.checkNotNull(
                customerRepositoryComponent.getRepository(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.provideRegisterContractViewProvider =
        ForgePassModule_ProvideRegisterContractViewFactory.create(builder.forgePassModule);

    this.forgePassPresenterProvider =
        ForgePassPresenter_Factory.create(
            forgePassPresenterMembersInjector,
            getRepositoryProvider,
            provideRegisterContractViewProvider);

    this.forgePassActivityMembersInjector =
        ForgePassActivity_MembersInjector.create(forgePassPresenterProvider);
  }

  @Override
  public void inject(ForgePassActivity activity) {
    forgePassActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private ForgePassModule forgePassModule;

    private CustomerRepositoryComponent customerRepositoryComponent;

    private Builder() {}

    public ForgePassComponent build() {
      if (forgePassModule == null) {
        throw new IllegalStateException(ForgePassModule.class.getCanonicalName() + " must be set");
      }
      if (customerRepositoryComponent == null) {
        throw new IllegalStateException(
            CustomerRepositoryComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerForgePassComponent(this);
    }

    public Builder forgePassModule(ForgePassModule forgePassModule) {
      this.forgePassModule = Preconditions.checkNotNull(forgePassModule);
      return this;
    }

    public Builder customerRepositoryComponent(
        CustomerRepositoryComponent customerRepositoryComponent) {
      this.customerRepositoryComponent = Preconditions.checkNotNull(customerRepositoryComponent);
      return this;
    }
  }
}
