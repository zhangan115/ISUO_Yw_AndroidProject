// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.isuo.yw2application.view.main.device.search;

import com.isuo.yw2application.mode.customer.CustomerRepository;
import com.isuo.yw2application.mode.customer.CustomerRepositoryComponent;
import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerEquipSearchComponent implements EquipSearchComponent {
  private MembersInjector<EquipSearchPresenter> equipSearchPresenterMembersInjector;

  private Provider<CustomerRepository> getRepositoryProvider;

  private Provider<EquipSearchContract.View> provideEquipSearchContractViewProvider;

  private Provider<EquipSearchPresenter> equipSearchPresenterProvider;

  private MembersInjector<EquipSearchActivity> equipSearchActivityMembersInjector;

  private DaggerEquipSearchComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.equipSearchPresenterMembersInjector = EquipSearchPresenter_MembersInjector.create();

    this.getRepositoryProvider =
        new Factory<CustomerRepository>() {
          private final CustomerRepositoryComponent customerRepositoryComponent =
              builder.customerRepositoryComponent;

          @Override
          public CustomerRepository get() {
            return Preconditions.checkNotNull(
                customerRepositoryComponent.getRepository(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.provideEquipSearchContractViewProvider =
        EquipSearchModule_ProvideEquipSearchContractViewFactory.create(builder.equipSearchModule);

    this.equipSearchPresenterProvider =
        EquipSearchPresenter_Factory.create(
            equipSearchPresenterMembersInjector,
            getRepositoryProvider,
            provideEquipSearchContractViewProvider);

    this.equipSearchActivityMembersInjector =
        EquipSearchActivity_MembersInjector.create(equipSearchPresenterProvider);
  }

  @Override
  public void inject(EquipSearchActivity activity) {
    equipSearchActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private EquipSearchModule equipSearchModule;

    private CustomerRepositoryComponent customerRepositoryComponent;

    private Builder() {}

    public EquipSearchComponent build() {
      if (equipSearchModule == null) {
        throw new IllegalStateException(
            EquipSearchModule.class.getCanonicalName() + " must be set");
      }
      if (customerRepositoryComponent == null) {
        throw new IllegalStateException(
            CustomerRepositoryComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerEquipSearchComponent(this);
    }

    public Builder equipSearchModule(EquipSearchModule equipSearchModule) {
      this.equipSearchModule = Preconditions.checkNotNull(equipSearchModule);
      return this;
    }

    public Builder customerRepositoryComponent(
        CustomerRepositoryComponent customerRepositoryComponent) {
      this.customerRepositoryComponent = Preconditions.checkNotNull(customerRepositoryComponent);
      return this;
    }
  }
}
