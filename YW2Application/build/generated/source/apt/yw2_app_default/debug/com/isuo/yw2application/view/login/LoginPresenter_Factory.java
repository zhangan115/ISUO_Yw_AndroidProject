// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.isuo.yw2application.view.login;

import com.isuo.yw2application.mode.customer.CustomerRepository;
import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import javax.inject.Provider;

public final class LoginPresenter_Factory implements Factory<LoginPresenter> {
  private final MembersInjector<LoginPresenter> loginPresenterMembersInjector;

  private final Provider<CustomerRepository> repositoryProvider;

  private final Provider<LoginContract.View> viewProvider;

  public LoginPresenter_Factory(
      MembersInjector<LoginPresenter> loginPresenterMembersInjector,
      Provider<CustomerRepository> repositoryProvider,
      Provider<LoginContract.View> viewProvider) {
    assert loginPresenterMembersInjector != null;
    this.loginPresenterMembersInjector = loginPresenterMembersInjector;
    assert repositoryProvider != null;
    this.repositoryProvider = repositoryProvider;
    assert viewProvider != null;
    this.viewProvider = viewProvider;
  }

  @Override
  public LoginPresenter get() {
    return MembersInjectors.injectMembers(
        loginPresenterMembersInjector,
        new LoginPresenter(repositoryProvider.get(), viewProvider.get()));
  }

  public static Factory<LoginPresenter> create(
      MembersInjector<LoginPresenter> loginPresenterMembersInjector,
      Provider<CustomerRepository> repositoryProvider,
      Provider<LoginContract.View> viewProvider) {
    return new LoginPresenter_Factory(
        loginPresenterMembersInjector, repositoryProvider, viewProvider);
  }
}
