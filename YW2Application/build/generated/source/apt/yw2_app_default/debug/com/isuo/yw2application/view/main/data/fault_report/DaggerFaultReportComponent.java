// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.isuo.yw2application.view.main.data.fault_report;

import com.isuo.yw2application.mode.customer.CustomerRepository;
import com.isuo.yw2application.mode.customer.CustomerRepositoryComponent;
import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerFaultReportComponent implements FaultReportComponent {
  private MembersInjector<FaultReportPresenter> faultReportPresenterMembersInjector;

  private Provider<CustomerRepository> getRepositoryProvider;

  private Provider<FaultReportContract.View> provideFaultReportContractViewProvider;

  private Provider<FaultReportPresenter> faultReportPresenterProvider;

  private MembersInjector<FaultReportActivity> faultReportActivityMembersInjector;

  private DaggerFaultReportComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.faultReportPresenterMembersInjector = FaultReportPresenter_MembersInjector.create();

    this.getRepositoryProvider =
        new Factory<CustomerRepository>() {
          private final CustomerRepositoryComponent customerRepositoryComponent =
              builder.customerRepositoryComponent;

          @Override
          public CustomerRepository get() {
            return Preconditions.checkNotNull(
                customerRepositoryComponent.getRepository(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.provideFaultReportContractViewProvider =
        FaultReportModule_ProvideFaultReportContractViewFactory.create(builder.faultReportModule);

    this.faultReportPresenterProvider =
        FaultReportPresenter_Factory.create(
            faultReportPresenterMembersInjector,
            getRepositoryProvider,
            provideFaultReportContractViewProvider);

    this.faultReportActivityMembersInjector =
        FaultReportActivity_MembersInjector.create(faultReportPresenterProvider);
  }

  @Override
  public void inject(FaultReportActivity activity) {
    faultReportActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private FaultReportModule faultReportModule;

    private CustomerRepositoryComponent customerRepositoryComponent;

    private Builder() {}

    public FaultReportComponent build() {
      if (faultReportModule == null) {
        throw new IllegalStateException(
            FaultReportModule.class.getCanonicalName() + " must be set");
      }
      if (customerRepositoryComponent == null) {
        throw new IllegalStateException(
            CustomerRepositoryComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerFaultReportComponent(this);
    }

    public Builder faultReportModule(FaultReportModule faultReportModule) {
      this.faultReportModule = Preconditions.checkNotNull(faultReportModule);
      return this;
    }

    public Builder customerRepositoryComponent(
        CustomerRepositoryComponent customerRepositoryComponent) {
      this.customerRepositoryComponent = Preconditions.checkNotNull(customerRepositoryComponent);
      return this;
    }
  }
}
