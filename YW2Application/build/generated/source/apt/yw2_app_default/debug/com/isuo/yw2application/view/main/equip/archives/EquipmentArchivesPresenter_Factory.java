// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.isuo.yw2application.view.main.equip.archives;

import com.isuo.yw2application.mode.customer.CustomerRepository;
import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import javax.inject.Provider;

public final class EquipmentArchivesPresenter_Factory
    implements Factory<EquipmentArchivesPresenter> {
  private final MembersInjector<EquipmentArchivesPresenter>
      equipmentArchivesPresenterMembersInjector;

  private final Provider<CustomerRepository> mRepositoryProvider;

  private final Provider<EquipmentArchivesContract.View> mViewProvider;

  public EquipmentArchivesPresenter_Factory(
      MembersInjector<EquipmentArchivesPresenter> equipmentArchivesPresenterMembersInjector,
      Provider<CustomerRepository> mRepositoryProvider,
      Provider<EquipmentArchivesContract.View> mViewProvider) {
    assert equipmentArchivesPresenterMembersInjector != null;
    this.equipmentArchivesPresenterMembersInjector = equipmentArchivesPresenterMembersInjector;
    assert mRepositoryProvider != null;
    this.mRepositoryProvider = mRepositoryProvider;
    assert mViewProvider != null;
    this.mViewProvider = mViewProvider;
  }

  @Override
  public EquipmentArchivesPresenter get() {
    return MembersInjectors.injectMembers(
        equipmentArchivesPresenterMembersInjector,
        new EquipmentArchivesPresenter(mRepositoryProvider.get(), mViewProvider.get()));
  }

  public static Factory<EquipmentArchivesPresenter> create(
      MembersInjector<EquipmentArchivesPresenter> equipmentArchivesPresenterMembersInjector,
      Provider<CustomerRepository> mRepositoryProvider,
      Provider<EquipmentArchivesContract.View> mViewProvider) {
    return new EquipmentArchivesPresenter_Factory(
        equipmentArchivesPresenterMembersInjector, mRepositoryProvider, mViewProvider);
  }
}
