// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.isuo.yw2application.view.main.feedback;

import com.isuo.yw2application.mode.customer.CustomerRepository;
import com.isuo.yw2application.mode.customer.CustomerRepositoryComponent;
import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerQuestionComponent implements QuestionComponent {
  private MembersInjector<QuestionPresenter> questionPresenterMembersInjector;

  private Provider<CustomerRepository> getRepositoryProvider;

  private Provider<QuestionContract.View> provideQuestionContractViewProvider;

  private Provider<QuestionPresenter> questionPresenterProvider;

  private MembersInjector<QuestionActivity> questionActivityMembersInjector;

  private DaggerQuestionComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.questionPresenterMembersInjector = QuestionPresenter_MembersInjector.create();

    this.getRepositoryProvider =
        new Factory<CustomerRepository>() {
          private final CustomerRepositoryComponent customerRepositoryComponent =
              builder.customerRepositoryComponent;

          @Override
          public CustomerRepository get() {
            return Preconditions.checkNotNull(
                customerRepositoryComponent.getRepository(),
                "Cannot return null from a non-@Nullable component method");
          }
        };

    this.provideQuestionContractViewProvider =
        QuestionModule_ProvideQuestionContractViewFactory.create(builder.questionModule);

    this.questionPresenterProvider =
        QuestionPresenter_Factory.create(
            questionPresenterMembersInjector,
            getRepositoryProvider,
            provideQuestionContractViewProvider);

    this.questionActivityMembersInjector =
        QuestionActivity_MembersInjector.create(questionPresenterProvider);
  }

  @Override
  public void inject(QuestionActivity activity) {
    questionActivityMembersInjector.injectMembers(activity);
  }

  public static final class Builder {
    private QuestionModule questionModule;

    private CustomerRepositoryComponent customerRepositoryComponent;

    private Builder() {}

    public QuestionComponent build() {
      if (questionModule == null) {
        throw new IllegalStateException(QuestionModule.class.getCanonicalName() + " must be set");
      }
      if (customerRepositoryComponent == null) {
        throw new IllegalStateException(
            CustomerRepositoryComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerQuestionComponent(this);
    }

    public Builder questionModule(QuestionModule questionModule) {
      this.questionModule = Preconditions.checkNotNull(questionModule);
      return this;
    }

    public Builder customerRepositoryComponent(
        CustomerRepositoryComponent customerRepositoryComponent) {
      this.customerRepositoryComponent = Preconditions.checkNotNull(customerRepositoryComponent);
      return this;
    }
  }
}
