// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.isuo.yw2application.view.main.device.search;

import com.isuo.yw2application.mode.customer.CustomerRepository;
import dagger.MembersInjector;
import dagger.internal.Factory;
import dagger.internal.MembersInjectors;
import javax.inject.Provider;

public final class EquipSearchPresenter_Factory implements Factory<EquipSearchPresenter> {
  private final MembersInjector<EquipSearchPresenter> equipSearchPresenterMembersInjector;

  private final Provider<CustomerRepository> repositoryProvider;

  private final Provider<EquipSearchContract.View> viewProvider;

  public EquipSearchPresenter_Factory(
      MembersInjector<EquipSearchPresenter> equipSearchPresenterMembersInjector,
      Provider<CustomerRepository> repositoryProvider,
      Provider<EquipSearchContract.View> viewProvider) {
    assert equipSearchPresenterMembersInjector != null;
    this.equipSearchPresenterMembersInjector = equipSearchPresenterMembersInjector;
    assert repositoryProvider != null;
    this.repositoryProvider = repositoryProvider;
    assert viewProvider != null;
    this.viewProvider = viewProvider;
  }

  @Override
  public EquipSearchPresenter get() {
    return MembersInjectors.injectMembers(
        equipSearchPresenterMembersInjector,
        new EquipSearchPresenter(repositoryProvider.get(), viewProvider.get()));
  }

  public static Factory<EquipSearchPresenter> create(
      MembersInjector<EquipSearchPresenter> equipSearchPresenterMembersInjector,
      Provider<CustomerRepository> repositoryProvider,
      Provider<EquipSearchContract.View> viewProvider) {
    return new EquipSearchPresenter_Factory(
        equipSearchPresenterMembersInjector, repositoryProvider, viewProvider);
  }
}
